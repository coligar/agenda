generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Schedule {
  id              String         @id @default(cuid())
  day             DateTime       @db.Date
  starttime       DateTime       @db.Time(0)
  endtime         DateTime       @db.Time(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String?
  status          StatusSchedule @default(ACTIVE)
  interviewer     String?        @unique
  schedule_typeId String?        @unique
  area_activityId String?        @unique
  schedule_type   ScheduleType?  @relation(fields: [schedule_typeId], references: [id])
  area_activity   AreaActivity?  @relation(fields: [area_activityId], references: [id])
  user            User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  name                  String
  role                  Role          @default(USER)
  avatar                String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  account_verified      Boolean       @default(false)
  account_verified_date DateTime?
  birth_date            DateTime?     @db.Date
  cpf                   String?       @db.VarChar(14)
  have_desability       Boolean       @default(false)
  lastname              String?
  own_car               Boolean       @default(false)
  password              String?
  rg                    String?
  sex                   Sex?
  status                StatusUser    @default(NOTVERIFIED)
  area_activityId       String?
  scholarity_id         String?
  schedule              Schedule[]
  area_activity         AreaActivity? @relation(fields: [area_activityId], references: [id])
  scholarity            Scholarity?   @relation(fields: [scholarity_id], references: [id])
  resume                Resume?
  curriculo             Curriculo?
  address               Address[]
  email_contact         Email[]
  phone_contact         Phone[]

  @@index([area_activityId])
  @@index([scholarity_id])
}

model Resume {
  id                      String                   @id @default(cuid())
  sumary                  String?                  @db.Text
  userId                  String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  professional_experience ProfessionalExperience[]
}

model ProfessionalExperience {
  id          String   @id @default(cuid())
  company     String   @db.VarChar(255)
  admission   DateTime @db.Date
  resignation DateTime @db.Date
  activity    String   @db.MediumText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model Curriculo {
  id                      String   @id @default(cuid())
  sumary                  String?  @db.Text
  last_company            String   @db.VarChar(255)
  last_admission          DateTime @db.Date
  last_resignation        DateTime @db.Date
  last_activity           String   @db.MediumText
  penultimate_company     String   @db.VarChar(255)
  penultimate_admission   DateTime @db.Date
  penultimate_resignation DateTime @db.Date
  penultimate_activity    String   @db.MediumText
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AreaActivity {
  id       String     @id @default(cuid())
  name     String     @unique
  color    String     @unique
  schedule Schedule[]
  user     User[]
}

model Address {
  id         String   @id @default(cuid())
  zip        String?
  address    String?
  number     String?
  complement String?
  district   String?
  city       String?
  uf         String?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Email {
  id               String      @id @default(cuid())
  email            String?     @unique
  userId           String
  contact_type     ContactType @default(PERSONAL)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  is_default_email Boolean     @default(false)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Phone {
  id               String      @id @default(cuid())
  phone            String?     @unique
  userId           String
  contact_type     ContactType @default(RESIDENTIAL)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  is_default_phone Boolean     @default(false)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Scholarity {
  id   String @id @default(cuid())
  name String
  user User[]
}

model ScheduleType {
  id        String     @id @default(cuid())
  name      String     @unique
  icon      String     @unique
  color     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedule  Schedule[]
}

enum StatusUser {
  ACTIVE
  CANCELED
  NOTVERIFIED
  INACTIVE
}

enum StatusSchedule {
  ACTIVE
  RESCHEDULED
  CANCELED
  FINISHED
  WAITING
  CONFIRMED
}

enum Role {
  USER
  ADMIN
}

enum Sex {
  F
  M
}

enum ContactType {
  RESIDENTIAL
  COMMERCIAL
  PERSONAL
}
